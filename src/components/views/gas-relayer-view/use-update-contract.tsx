import { client } from '@components/contexts/query-provider';
import { type FormData } from '@components/views/gas-relayer-view/transactions-sheet';
import { type Contract } from '@components/views/gas-relayer-view/use-contracts';
import { ENV } from '@config';
import { AppType } from '@constants/appInfo';
import { GAS_API_ENDPOINTS } from '@constants/endpoints';
import { useAppInfoSuspenseQuery } from '@hooks/data/app';
import { appQueryKeys } from '@hooks/data/app/keys';
import { useMutation } from '@tanstack/react-query';

type Params = {
  appId: string;
  appType: AppType;
  id: string;
};

export const useUpdateContract = ({ appId, appType, id }: Params) => {
  const { data: appInfo } = useAppInfoSuspenseQuery(appQueryKeys.info({ appId, appType }));

  return useMutation({
    mutationFn: ({ name }: FormData) => {
      return fetch(`${GAS_API_ENDPOINTS[ENV]}/v1/dashboard/update-contract`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Magic-Secret-Key': appInfo.liveSecretKey,
        },
        body: JSON.stringify({
          contract_id: id,
          name,
        }),
      }).then<Response>((r) => r.json());
    },
    onMutate: ({ name }) => {
      client.setQueryData<Contract>(['contract', id], (prev) => ({
        ...prev!,
        name,
      }));
    },
    onSettled: () => {
      client.invalidateQueries({ queryKey: ['contracts'] });
    },
  });
};

// Generated by https://quicktype.io

type Response =
  | {
      success: true;
      error_message: null;
    }
  | {
      success: false;
      error_message: string;
    };
