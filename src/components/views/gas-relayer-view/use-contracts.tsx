import { client } from '@components/contexts/query-provider';
import { ENV } from '@config';
import { AppType } from '@constants/appInfo';
import { GAS_API_ENDPOINTS } from '@constants/endpoints';
import { useAppInfoSuspenseQuery } from '@hooks/data/app';
import { appQueryKeys } from '@hooks/data/app/keys';
import { getNetworkFromChainId, type NETWORK } from '@libs/blockchain';
import { useQuery } from '@tanstack/react-query';

type Props = {
  appId: string;
  appType: AppType;
};

export const useContracts = ({ appId, appType }: Props) => {
  const { data: appInfo } = useAppInfoSuspenseQuery(appQueryKeys.info({ appId, appType }));

  return useQuery({
    queryKey: ['contracts'],
    queryFn: async () => {
      const data = await fetch(
        `${GAS_API_ENDPOINTS[ENV]}/v1/dashboard/get-gas-report?${new URLSearchParams({
          month: `${new Date().getMonth() + 1}`,
          year: `${new Date().getFullYear()}`,
        })}`,
        { headers: { 'X-Magic-Secret-Key': appInfo.liveSecretKey } },
      ).then<Response>((r) => r.json());

      const contracts = [...data.gas_spent_by_contract]
        .map(
          ({ contract_id, time_created, name, chain_id, contract_address, gas_spent }) =>
            ({
              id: contract_id,
              name,
              network: getNetworkFromChainId(chain_id),
              address: contract_address,
              totalGas: gas_spent,
              createdAt: new Date(time_created),
            }) as Contract,
        )
        .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());

      contracts.forEach((contract) => {
        client.setQueryData<Contract>(['contract', contract.id], contract);
      });

      return {
        gasSpent: data.gas_spent_across_contracts,
        contracts,
      };
    },
  });
};

export type Contract = {
  id: string;
  name: string;
  network: NETWORK;
  address: string;
  totalGas: number;
  createdAt: Date;
};

// Generated by https://quicktype.io

interface Response {
  magic_client_id: string;
  gas_spent_across_contracts: {
    [chainId: number]: number;
  };
  gas_spent_by_contract: GasSpentByContract[];
}

interface GasSpentByContract {
  contract_id: string;
  contract_address: string;
  chain_id: number;
  name: string;
  time_created: string;
  gas_spent: number;
}
