import { client } from '@components/contexts/query-provider';
import { type FormData } from '@components/views/gas-relayer-view/add-contract-modal';
import { type Contract } from '@components/views/gas-relayer-view/use-contracts';
import { ENV } from '@config';
import { GAS_API_ENDPOINTS } from '@constants/endpoints';
import { CHAINS } from '@libs/blockchain';
import { useMutation } from '@tanstack/react-query';

export const useAddContract = () => {
  return useMutation({
    mutationFn: async ({ name, address, network, abi, liveSecretKey }: FormData) => {
      return fetch(`${GAS_API_ENDPOINTS[ENV]}/v1/dashboard/register-contract`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Magic-Secret-Key': liveSecretKey,
        },
        body: JSON.stringify({
          name,
          contract_address: address,
          chain_id: CHAINS[network].chain.id,
          ...(abi ? { abi: JSON.parse(abi) } : {}),
        }),
      }).then<Response>((r) => r.json());
    },
    onSuccess: (result, contract) => {
      if (!result.success) return;
      const { contract_id: id } = result;
      client.setQueryData<Contract>(['contract', id], {
        id,
        ...contract,
        totalGas: 0,
        createdAt: new Date(),
      });
      client.invalidateQueries({ queryKey: ['contracts'] });
    },
  });
};

// Generated by https://quicktype.io

type Response =
  | {
      success: true;
      contract_id: string;
      error_message: null;
    }
  | {
      success: false;
      error_message: 'Contract already exists';
    };
